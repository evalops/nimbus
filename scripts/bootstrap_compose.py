from __future__ import annotations

import argparse
import json
import secrets
from pathlib import Path
from typing import Optional

import httpx

from nimbus.common.security import mint_agent_token


DEFAULTS = {
    "NIMBUS_GITHUB_APP_ID": "1",
    "NIMBUS_GITHUB_APP_INSTALLATION_ID": "1",
    "NIMBUS_GITHUB_WEBHOOK_SECRET": None,
    "NIMBUS_GITHUB_APP_PRIVATE_KEY": "replace-with-github-app-private-key",
    "NIMBUS_AGENT_TOKEN_RATE_LIMIT": "15",
    "NIMBUS_AGENT_TOKEN_RATE_INTERVAL": "60",
    "NIMBUS_CACHE_TOKEN_TTL": "3600",
}


SECRET_KEYS = [
    "NIMBUS_JWT_SECRET",
    "NIMBUS_AGENT_TOKEN_SECRET",
    "NIMBUS_CACHE_SHARED_SECRET",
]


OPTIONAL_KEYS = [
    "NIMBUS_CONTROL_PLANE_TOKEN",
    "NIMBUS_CACHE_TOKEN_VALUE",
]


def _random_secret(length: int = 48) -> str:
    return secrets.token_urlsafe(length)


def bootstrap_env(
    output_path: Path,
    *,
    force: bool = False,
    admin_subject: str = "admin",
    admin_ttl: int = 86_400,
    print_admin_token: bool = True,
    control_plane_url: str | None = None,
    admin_token: str | None = None,
    agent_id: str = "agent-1",
    agent_ttl: int = 3_600,
    secrets_output: Path | None = None,
) -> Optional[str]:
    if output_path.exists() and not force:
        raise FileExistsError(f"{output_path} already exists; use --force to overwrite")

    values: dict[str, str] = {}
    for key, default in DEFAULTS.items():
        if default is None:
            values[key] = _random_secret()
        else:
            values[key] = default

    for key in SECRET_KEYS:
        values[key] = _random_secret()

    for key in OPTIONAL_KEYS:
        values[key] = ""

    minted_admin_token: Optional[str] = None
    if print_admin_token:
        minted_admin_token = mint_agent_token(
            agent_id=admin_subject,
            secret=values["NIMBUS_JWT_SECRET"],
            ttl_seconds=admin_ttl,
            version=0,
        )

    agent_token_value: Optional[str] = None
    if control_plane_url and admin_token:
        agent_token_value = _mint_agent_token_remote(
            control_plane_url,
            admin_token,
            agent_id=agent_id,
            ttl_seconds=agent_ttl,
        )
        values["NIMBUS_CONTROL_PLANE_TOKEN"] = agent_token_value

    if agent_token_value:
        print(f"Minted agent token for {agent_id}:")
        print(agent_token_value)

    if secrets_output:
        secrets_payload = {
            "admin_jwt": minted_admin_token if print_admin_token else None,
            "agent_token": agent_token_value,
            "agent_id": agent_id,
        }
        secrets_output.write_text(json.dumps(secrets_payload, indent=2) + "\n", encoding="utf-8")

    lines = ["# Generated by scripts/bootstrap_compose.py"]
    for key, value in values.items():
        lines.append(f"{key}={value}")

    output_path.write_text("\n".join(lines) + "\n", encoding="utf-8")

    return minted_admin_token


def _mint_agent_token_remote(
    base_url: str,
    admin_token: str,
    *,
    agent_id: str,
    ttl_seconds: int,
) -> str:
    url = base_url.rstrip("/") + "/api/agents/token"
    payload = {"agent_id": agent_id, "ttl_seconds": ttl_seconds}
    headers = {"Authorization": f"Bearer {admin_token}"}
    with httpx.Client(timeout=10.0) as client:
        response = client.post(url, headers=headers, json=payload)
        response.raise_for_status()
        data = response.json()
        return data["token"]


def parse_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser(description="Bootstrap docker compose environment for Nimbus")
    parser.add_argument("--output", default=".env", help="Output .env file path")
    parser.add_argument("--force", action="store_true", help="Overwrite existing output file")
    parser.add_argument("--admin-subject", default="admin", help="Subject claim for minted admin JWT")
    parser.add_argument("--admin-ttl", type=int, default=86_400, help="TTL (seconds) for admin JWT")
    parser.add_argument("--no-admin-token", action="store_true", help="Skip admin JWT generation")
    parser.add_argument("--control-plane-url", help="Control plane base URL to mint agent token")
    parser.add_argument("--admin-token", help="Existing admin JWT used for remote agent token minting")
    parser.add_argument("--agent-id", default="agent-1", help="Agent identifier for remote token mint")
    parser.add_argument("--agent-ttl", type=int, default=3_600, help="TTL (seconds) for remote agent token mint")
    parser.add_argument("--secrets-output", help="Optional JSON file to write minted tokens for sharing")
    return parser.parse_args()


def main() -> None:
    args = parse_args()
    token = bootstrap_env(
        Path(args.output),
        force=args.force,
        admin_subject=args.admin_subject,
        admin_ttl=args.admin_ttl,
        print_admin_token=not args.no_admin_token,
        control_plane_url=args.control_plane_url,
        admin_token=args.admin_token,
        agent_id=args.agent_id,
        agent_ttl=args.agent_ttl,
        secrets_output=Path(args.secrets_output) if args.secrets_output else None,
    )
    if token:
        print("Admin JWT:")
        print(token)


if __name__ == "__main__":
    main()
