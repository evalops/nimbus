from __future__ import annotations

import argparse
import secrets
from pathlib import Path
from typing import Optional

from smith.common.security import mint_agent_token


DEFAULTS = {
    "SMITH_GITHUB_APP_ID": "1",
    "SMITH_GITHUB_APP_INSTALLATION_ID": "1",
    "SMITH_GITHUB_WEBHOOK_SECRET": None,
    "SMITH_GITHUB_APP_PRIVATE_KEY": "replace-with-github-app-private-key",
    "SMITH_AGENT_TOKEN_RATE_LIMIT": "15",
    "SMITH_AGENT_TOKEN_RATE_INTERVAL": "60",
    "SMITH_CACHE_TOKEN_TTL": "3600",
}


SECRET_KEYS = [
    "SMITH_JWT_SECRET",
    "SMITH_AGENT_TOKEN_SECRET",
    "SMITH_CACHE_SHARED_SECRET",
]


OPTIONAL_KEYS = [
    "SMITH_CONTROL_PLANE_TOKEN",
    "SMITH_CACHE_TOKEN_VALUE",
]


def _random_secret(length: int = 48) -> str:
    return secrets.token_urlsafe(length)


def bootstrap_env(
    output_path: Path,
    *,
    force: bool = False,
    admin_subject: str = "admin",
    admin_ttl: int = 86_400,
    print_admin_token: bool = True,
) -> Optional[str]:
    if output_path.exists() and not force:
        raise FileExistsError(f"{output_path} already exists; use --force to overwrite")

    values: dict[str, str] = {}
    for key, default in DEFAULTS.items():
        if default is None:
            values[key] = _random_secret()
        else:
            values[key] = default

    for key in SECRET_KEYS:
        values[key] = _random_secret()

    for key in OPTIONAL_KEYS:
        values[key] = ""

    lines = ["# Generated by scripts/bootstrap_compose.py"]
    for key, value in values.items():
        lines.append(f"{key}={value}")

    output_path.write_text("\n".join(lines) + "\n", encoding="utf-8")

    if print_admin_token:
        admin_token = mint_agent_token(
            agent_id=admin_subject,
            secret=values["SMITH_JWT_SECRET"],
            ttl_seconds=admin_ttl,
            version=0,
        )
        return admin_token
    return None


def parse_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser(description="Bootstrap docker compose environment for Smith")
    parser.add_argument("--output", default=".env", help="Output .env file path")
    parser.add_argument("--force", action="store_true", help="Overwrite existing output file")
    parser.add_argument("--admin-subject", default="admin", help="Subject claim for minted admin JWT")
    parser.add_argument("--admin-ttl", type=int, default=86_400, help="TTL (seconds) for admin JWT")
    parser.add_argument("--no-admin-token", action="store_true", help="Skip admin JWT generation")
    return parser.parse_args()


def main() -> None:
    args = parse_args()
    token = bootstrap_env(
        Path(args.output),
        force=args.force,
        admin_subject=args.admin_subject,
        admin_ttl=args.admin_ttl,
        print_admin_token=not args.no_admin_token,
    )
    if token:
        print("Admin JWT:")
        print(token)


if __name__ == "__main__":
    main()
